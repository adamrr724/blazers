// Prisma Schema - PostgreSQL for production deployment

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credential-based auth
  role          String    @default("USER") // USER or ADMIN
  accounts      Account[]
  sessions      Session[]
  votes         Vote[]
  nicknames     Nickname[]
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id               String     @id @default(cuid())
  name             String     @unique
  position         String
  jerseyNumber     String
  imageUrl         String?
  officialNickname String?
  nicknames        Nickname[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Nickname {
  id          String   @id @default(cuid())
  nickname    String
  playerId    String
  suggestedBy String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  votes       Vote[]
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [suggestedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([nickname, playerId])
}

model Vote {
  id         String   @id @default(cuid())
  userId     String
  nicknameId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nickname   Nickname @relation(fields: [nicknameId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, nicknameId])
}
